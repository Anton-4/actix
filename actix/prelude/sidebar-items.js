initSidebarItems({"enum":[["ActorState","Actor execution state"],["FramedError",""],["MailboxError","Set of error that can occure during message delivery process"],["SendError",""]],"mod":[["actix",""]],"struct":[["Address","Local address of the actor"],["Arbiter","Event loop controller"],["Context","Actor execution context"],["FramedReader","Framed type wrapper, that simplify handling framed objects with actor"],["FramedWriter","Framed sink type wrapper, that simplify handling framed objects with actor"],["Response","Helper type for representing different type of message responses"],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["Supervisor","Actor supervisor"],["SyncAddress","`Send` address of the actor. Actor can run in different thread"],["System","System is an actor which manages process."]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["ActorContext","Actor execution context"],["ArbiterService","Trait defines arbiter's service."],["AsyncContext","Asynchronous execution context"],["ContextFutureSpawner","Helper trait which can spawn future into actor's context"],["Handler","Message handler"],["ResponseType","Message response type"],["StreamHandler","Stream handler"],["Supervised","Actors with ability to restart after failure"],["SystemService","Trait defines system's service."]],"type":[["MessageResult","A specialized `Result` for message result responses"],["ResponseActFuture","A specialized actor future for async message handler"],["ResponseFuture","A specialized future for async message handler"]]});